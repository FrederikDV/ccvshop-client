<?php

declare(strict_types=1);

namespace JacobDeKeizer\Ccv\Models\Internal\Entity\Orderrow\Input;

use JacobDeKeizer\Ccv\Contracts\Model;
use JacobDeKeizer\Ccv\Traits\FromArray;
use JacobDeKeizer\Ccv\Traits\ToArray;

/**
 * This class is autogenerated.
 */
class Input implements Model
{
    use FromArray;
    use ToArray;

    /**
     * @var string|null Product type of this orderrow. If the type is a deposit then VAT will always be 0%. If not included then product will be the default.
     */
    private ?string $productType;

    /**
     * @var bool|null Default: true. When true and when the product has a deposit price (either container or safety) these additional order rows will automatically be created.
     */
    private ?bool $autoCreateDepositRows;

    /**
     * @var int|null Unique product id. If provided product data will be used to create an order row.
     */
    private ?int $productId;

    /**
     * @var string|null Product name. Only used if product_id is empty
     */
    private ?string $productName;

    /**
     * @var string|null Product number. Only used if product_id is empty
     */
    private ?string $productNumber;

    /**
     * @var float Quantity of products
     */
    private float $count;

    /**
     * @var float|null Product sell price. Should be included if product_id is null. If product_id is provided this value will used instead of the product data.
     */
    private ?float $price;

    /**
     * @var float|null Product purchase price. Should be included if product_id is null. If product_id is provided this value will used instead of the product data.
     */
    private ?float $productPurchasePrice;

    /**
     * @var float|null Discount. Should be included if product_id is null. If product_id is provided this value will used instead of the product data.
     */
    private ?float $discount;

    /**
     * @var float|null Tax percentage. Should be included if product_id is null. If product_id is provided this value will used instead of the product data.
     */
    private ?float $tax;

    /**
     * @var string|null Product unit. Should be included if product_id is null. If product_id is provided this value will used instead of the product data.
     */
    private ?string $unit;

    /**
     * @var float|null Product weight. Should be included if product_id is null. If product_id is provided this value will used instead of the product data.
     */
    private ?float $weight;

    /**
     * @var string|null Memo description of product. Should be included if product_id is null. If product_id is provided this value will used instead of the product data.
     */
    private ?string $memo;

    /**
     * @var int|null Package id. Depending on this ID, different shippingcosts will be calculated. Required if product_id is empty. See /:version/packages/
     */
    private ?int $packageId;

    /**
     * @var float|null This should be filled if this order rows has an attribute combination. The associated attributes value with this id will be added to this row.
     */
    private ?float $attributeCombinationId;

    public static function fromArray(array $data): static
    {
        return static::createFromArray($data);
    }

    /**
     * @return string|null Product type of this orderrow. If the type is a deposit then VAT will always be 0%. If not included then product will be the default.
     */
    public function getProductType(): ?string
    {
        return $this->productType;
    }

    /**
     * @return bool|null Default: true. When true and when the product has a deposit price (either container or safety) these additional order rows will automatically be created.
     */
    public function getAutoCreateDepositRows(): ?bool
    {
        return $this->autoCreateDepositRows;
    }

    /**
     * @return int|null Unique product id. If provided product data will be used to create an order row.
     */
    public function getProductId(): ?int
    {
        return $this->productId;
    }

    /**
     * @return string|null Product name. Only used if product_id is empty
     */
    public function getProductName(): ?string
    {
        return $this->productName;
    }

    /**
     * @return string|null Product number. Only used if product_id is empty
     */
    public function getProductNumber(): ?string
    {
        return $this->productNumber;
    }

    /**
     * @return float Quantity of products
     */
    public function getCount(): float
    {
        return $this->count;
    }

    /**
     * @return float|null Product sell price. Should be included if product_id is null. If product_id is provided this value will used instead of the product data.
     */
    public function getPrice(): ?float
    {
        return $this->price;
    }

    /**
     * @return float|null Product purchase price. Should be included if product_id is null. If product_id is provided this value will used instead of the product data.
     */
    public function getProductPurchasePrice(): ?float
    {
        return $this->productPurchasePrice;
    }

    /**
     * @return float|null Discount. Should be included if product_id is null. If product_id is provided this value will used instead of the product data.
     */
    public function getDiscount(): ?float
    {
        return $this->discount;
    }

    /**
     * @return float|null Tax percentage. Should be included if product_id is null. If product_id is provided this value will used instead of the product data.
     */
    public function getTax(): ?float
    {
        return $this->tax;
    }

    /**
     * @return string|null Product unit. Should be included if product_id is null. If product_id is provided this value will used instead of the product data.
     */
    public function getUnit(): ?string
    {
        return $this->unit;
    }

    /**
     * @return float|null Product weight. Should be included if product_id is null. If product_id is provided this value will used instead of the product data.
     */
    public function getWeight(): ?float
    {
        return $this->weight;
    }

    /**
     * @return string|null Memo description of product. Should be included if product_id is null. If product_id is provided this value will used instead of the product data.
     */
    public function getMemo(): ?string
    {
        return $this->memo;
    }

    /**
     * @return int|null Package id. Depending on this ID, different shippingcosts will be calculated. Required if product_id is empty. See /:version/packages/
     */
    public function getPackageId(): ?int
    {
        return $this->packageId;
    }

    /**
     * @return float|null This should be filled if this order rows has an attribute combination. The associated attributes value with this id will be added to this row.
     */
    public function getAttributeCombinationId(): ?float
    {
        return $this->attributeCombinationId;
    }

    /**
     * @param string|null $productType Product type of this orderrow. If the type is a deposit then VAT will always be 0%. If not included then product will be the default.
     * @return self
     */
    public function setProductType(?string $productType): self
    {
        $this->productType = $productType;
        return $this;
    }

    /**
     * @param bool|null $autoCreateDepositRows Default: true. When true and when the product has a deposit price (either container or safety) these additional order rows will automatically be created.
     * @return self
     */
    public function setAutoCreateDepositRows(?bool $autoCreateDepositRows): self
    {
        $this->autoCreateDepositRows = $autoCreateDepositRows;
        return $this;
    }

    /**
     * @param int|null $productId Unique product id. If provided product data will be used to create an order row.
     * @return self
     */
    public function setProductId(?int $productId): self
    {
        $this->productId = $productId;
        return $this;
    }

    /**
     * @param string|null $productName Product name. Only used if product_id is empty
     * @return self
     */
    public function setProductName(?string $productName): self
    {
        $this->productName = $productName;
        return $this;
    }

    /**
     * @param string|null $productNumber Product number. Only used if product_id is empty
     * @return self
     */
    public function setProductNumber(?string $productNumber): self
    {
        $this->productNumber = $productNumber;
        return $this;
    }

    /**
     * @param float $count Quantity of products
     * @return self
     */
    public function setCount(float $count): self
    {
        $this->count = $count;
        return $this;
    }

    /**
     * @param float|null $price Product sell price. Should be included if product_id is null. If product_id is provided this value will used instead of the product data.
     * @return self
     */
    public function setPrice(?float $price): self
    {
        $this->price = $price;
        return $this;
    }

    /**
     * @param float|null $productPurchasePrice Product purchase price. Should be included if product_id is null. If product_id is provided this value will used instead of the product data.
     * @return self
     */
    public function setProductPurchasePrice(?float $productPurchasePrice): self
    {
        $this->productPurchasePrice = $productPurchasePrice;
        return $this;
    }

    /**
     * @param float|null $discount Discount. Should be included if product_id is null. If product_id is provided this value will used instead of the product data.
     * @return self
     */
    public function setDiscount(?float $discount): self
    {
        $this->discount = $discount;
        return $this;
    }

    /**
     * @param float|null $tax Tax percentage. Should be included if product_id is null. If product_id is provided this value will used instead of the product data.
     * @return self
     */
    public function setTax(?float $tax): self
    {
        $this->tax = $tax;
        return $this;
    }

    /**
     * @param string|null $unit Product unit. Should be included if product_id is null. If product_id is provided this value will used instead of the product data.
     * @return self
     */
    public function setUnit(?string $unit): self
    {
        $this->unit = $unit;
        return $this;
    }

    /**
     * @param float|null $weight Product weight. Should be included if product_id is null. If product_id is provided this value will used instead of the product data.
     * @return self
     */
    public function setWeight(?float $weight): self
    {
        $this->weight = $weight;
        return $this;
    }

    /**
     * @param string|null $memo Memo description of product. Should be included if product_id is null. If product_id is provided this value will used instead of the product data.
     * @return self
     */
    public function setMemo(?string $memo): self
    {
        $this->memo = $memo;
        return $this;
    }

    /**
     * @param int|null $packageId Package id. Depending on this ID, different shippingcosts will be calculated. Required if product_id is empty. See /:version/packages/
     * @return self
     */
    public function setPackageId(?int $packageId): self
    {
        $this->packageId = $packageId;
        return $this;
    }

    /**
     * @param float|null $attributeCombinationId This should be filled if this order rows has an attribute combination. The associated attributes value with this id will be added to this row.
     * @return self
     */
    public function setAttributeCombinationId(?float $attributeCombinationId): self
    {
        $this->attributeCombinationId = $attributeCombinationId;
        return $this;
    }
}
