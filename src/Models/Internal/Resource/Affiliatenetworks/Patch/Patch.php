<?php

declare(strict_types=1);

namespace JacobDeKeizer\Ccv\Models\Internal\Resource\Affiliatenetworks\Patch;

use JacobDeKeizer\Ccv\Contracts\Model;
use JacobDeKeizer\Ccv\Traits\FromArray;
use JacobDeKeizer\Ccv\Traits\ToArray;

/**
 * This class is autogenerated.
 */
class Patch implements Model
{
    use FromArray;
    use ToArray;

    /**
     * @var string|null Affiliate network name
     */
    private ?string $name;

    /**
     * @var int|null Cookie TTL time in minutes until cookie expires.
     */
    private ?int $cookieTtl;

    /**
     * @var bool|null True: When multiple affiliate networks active, set only latest affiliate network. false: Use all affiliate networks.
     */
    private ?bool $deduplicate;

    public static function fromArray(array $data): static
    {
        return static::createFromArray($data);
    }

    /**
     * @return string|null Affiliate network name
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * @return int|null Cookie TTL time in minutes until cookie expires.
     */
    public function getCookieTtl(): ?int
    {
        return $this->cookieTtl;
    }

    /**
     * @return bool|null True: When multiple affiliate networks active, set only latest affiliate network. false: Use all affiliate networks.
     */
    public function getDeduplicate(): ?bool
    {
        return $this->deduplicate;
    }

    /**
     * @param string|null $name Affiliate network name
     * @return self
     */
    public function setName(?string $name): self
    {
        $this->name = $name;
        return $this;
    }

    /**
     * @param int|null $cookieTtl Cookie TTL time in minutes until cookie expires.
     * @return self
     */
    public function setCookieTtl(?int $cookieTtl): self
    {
        $this->cookieTtl = $cookieTtl;
        return $this;
    }

    /**
     * @param bool|null $deduplicate True: When multiple affiliate networks active, set only latest affiliate network. false: Use all affiliate networks.
     * @return self
     */
    public function setDeduplicate(?bool $deduplicate): self
    {
        $this->deduplicate = $deduplicate;
        return $this;
    }
}
