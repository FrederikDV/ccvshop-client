<?php

declare(strict_types=1);

namespace JacobDeKeizer\Ccv\Models\Internal\Resource\Redirects\Patch;

use JacobDeKeizer\Ccv\Contracts\Model;
use JacobDeKeizer\Ccv\Traits\FromArray;
use JacobDeKeizer\Ccv\Traits\ToArray;

/**
 * This class is autogenerated.
 */
class Patch implements Model
{
    use FromArray;
    use ToArray;

    /**
     * @var string|null When a visitor requests this url, he will be forwarded to target_url. This source_url will also be relative and must be unique.
     */
    private ?string $sourceUrl;

    /**
     * @var string|null Visitor will be forwarded to this url, which can be relative or absolute. It can also be a different domain.
     */
    private ?string $targetUrl;

    /**
     * @var bool|null Inactive redirects will be ignored.
     */
    private ?bool $active;

    public static function fromArray(array $data): static
    {
        return static::createFromArray($data);
    }

    /**
     * @return string|null When a visitor requests this url, he will be forwarded to target_url. This source_url will also be relative and must be unique.
     */
    public function getSourceUrl(): ?string
    {
        return $this->sourceUrl;
    }

    /**
     * @return string|null Visitor will be forwarded to this url, which can be relative or absolute. It can also be a different domain.
     */
    public function getTargetUrl(): ?string
    {
        return $this->targetUrl;
    }

    /**
     * @return bool|null Inactive redirects will be ignored.
     */
    public function getActive(): ?bool
    {
        return $this->active;
    }

    /**
     * @param string|null $sourceUrl When a visitor requests this url, he will be forwarded to target_url. This source_url will also be relative and must be unique.
     * @return self
     */
    public function setSourceUrl(?string $sourceUrl): self
    {
        $this->sourceUrl = $sourceUrl;
        return $this;
    }

    /**
     * @param string|null $targetUrl Visitor will be forwarded to this url, which can be relative or absolute. It can also be a different domain.
     * @return self
     */
    public function setTargetUrl(?string $targetUrl): self
    {
        $this->targetUrl = $targetUrl;
        return $this;
    }

    /**
     * @param bool|null $active Inactive redirects will be ignored.
     * @return self
     */
    public function setActive(?bool $active): self
    {
        $this->active = $active;
        return $this;
    }
}
