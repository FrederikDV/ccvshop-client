<?php

declare(strict_types=1);

namespace JacobDeKeizer\Ccv\Models\Vnd\Verto\Webshop\Resource\Products\Child;

use JacobDeKeizer\Ccv\Contracts\Model;
use JacobDeKeizer\Ccv\Traits\FromArray;
use JacobDeKeizer\Ccv\Traits\ToArray;

/**
 * This class is autogenerated.
 */
class Color implements Model
{
    use FromArray;
    use ToArray;

    /**
     * @var string Link to color resource
     */
    private string $href;

    /**
     * @var int Color Id
     */
    private int $id;

    /**
     * @var string Color name
     */
    private string $name;

    /**
     * @var string The type of color. A 'color' will have a hex color code. Exceptions are transparent and multicolor.
     */
    private string $type;

    /**
     * @var string|null Hex color code. Exceptions are transparent and multicolor. Then this is null.
     */
    private ?string $hex;

    public static function fromArray(array $data): static
    {
        return static::createFromArray($data);
    }

    /**
     * @return string Link to color resource
     */
    public function getHref(): string
    {
        return $this->href;
    }

    /**
     * @return int Color Id
     */
    public function getId(): int
    {
        return $this->id;
    }

    /**
     * @return string Color name
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * @return string The type of color. A 'color' will have a hex color code. Exceptions are transparent and multicolor.
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * @return string|null Hex color code. Exceptions are transparent and multicolor. Then this is null.
     */
    public function getHex(): ?string
    {
        return $this->hex;
    }

    /**
     * @param string $href Link to color resource
     * @return self
     */
    public function setHref(string $href): self
    {
        $this->href = $href;
        return $this;
    }

    /**
     * @param int $id Color Id
     * @return self
     */
    public function setId(int $id): self
    {
        $this->id = $id;
        return $this;
    }

    /**
     * @param string $name Color name
     * @return self
     */
    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    /**
     * @param string $type The type of color. A 'color' will have a hex color code. Exceptions are transparent and multicolor.
     * @return self
     */
    public function setType(string $type): self
    {
        $this->type = $type;
        return $this;
    }

    /**
     * @param string|null $hex Hex color code. Exceptions are transparent and multicolor. Then this is null.
     * @return self
     */
    public function setHex(?string $hex): self
    {
        $this->hex = $hex;
        return $this;
    }
}
